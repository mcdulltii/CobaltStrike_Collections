# Beacon Log visualization
# 001SPARTaN (for r3dqu1nn)

import ui.*;
import table.*;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;

global('$model $console $table');

sub updateTable {
    fork({
        local('$entry');

        # Clear the model so we can put new stuff in it.
        [$model clear: 1024];

        # For each entry in beaconlog, populate a row in the table
        foreach @entry (data_query('beaconlog')) {
            # We only care about beacon_input events because those are commands run by operators
            if (@entry[0] eq "beacon_input") {
                # Get operator who ran the command
                %modelEntry['operator'] = @entry[2];
                # Get bid of command
                $bid = @entry[1];
                # Get internal IP of system
                %modelEntry['ip'] = binfo($bid, "internal");
                # Get hostname of system
                %modelEntry['hostname'] = binfo($bid, "computer");
                # Get username beacon is runnning as
                %modelEntry['user'] = binfo($bid, "user");
                # Get pid of beacon
                %modelEntry['pid'] = binfo($bid, "pid");
                # Get command run on the beacon
                %modelEntry['command'] = @entry[3];
                # Get timestamp of command
                %modelEntry['timestamp'] = formatDate(@entry[4], "MMM dd HH:mm:ss z");
                # Add the new entry to $model
                [$model addEntry: %modelEntry];
            }
        }
        # Update with the new table
        [$model fireListeners];
    }, \$model);
}

# based on setupPopupMenu provided by Raphael Mudge
# https://gist.github.com/rsmudge/87ce80cd8d8d185c5870d559af2dc0c2
sub setupClickListener {
    # we're using fork({}) to run this in a separate Aggressor Script environment.
    # This reduces deadlock potential due to Sleep's global interpreter lock
    # this especially matters as our mouse listener will be fired for *everything*
    # to include mouse movements.
    fork({
        [$component addMouseListener: lambda({
            if ([$1 isPopupTrigger]) {
                # If right click, show popup
                show_popup($1, $name, $component);
            }
            else if ([$1 getClickCount] == 2) {
                foreach $row ([$table getSelectedRows]) {
                    # Compare pid from selected row to pid of all beacons to find correct beacon
                    foreach %beacon (beacons()) {
                        if (%beacon['pid'] eq [$model getValueAt: $row, 4]) {
                            openOrActivate(%beacon['id']);
                        }
                    }
                }
            }
        }, \$component, \$name)];
    }, $component => $1, $name => $2, $model => $model, $table => $table);
}

sub createVisualization {
    this('$client');
    # GenericTableModel from table.*
    # Has columns for email and token, defaults to sorting by token
    $model = [new GenericTableModel: @("operator", "ip", "hostname", "user", "pid", "command", "timestamp"), "beacon", 16];

    # Create a table from the GenericTableModel
    $table = [new ATable: $model];

    # Controls how the column headers will sort the table
    $sorter = [new TableRowSorter: $model];
    [$sorter toggleSortOrder: 3];
    # setComparator for email
    [$sorter setComparator: 0, {
        return $1 cmp $2;
    }];
    # setComparator for token
    [$sorter setComparator: 1, {
        return $1 cmp $2;
    }];
    # setComparator for timestamp
    [$sorter setComparator: 2, {
        return $1 cmp $2;
    }];
    # setComparator for click count
    [$sorter setComparator: 3, {
        return $1 <=> $2;
    }];

    # Set $sorter as the row sorter for $table
    [$table setRowSorter: $sorter];

    # Change resize mode for columns to make the layout a bit nicer.
    # [$table setAutoResizeMode: [JTable AUTO_RESIZE_ON]];

    # Create a scroll pane
    $scrollPane = [new JScrollPane: $table];

    $bottom = [new JPanel];
    [$bottom setLayout: [new BoxLayout: $bottom, [BoxLayout Y_AXIS]]];
    [$bottom setLayout: [new GridLayout: 1, 1]];

    $copyButton = [new JButton: "Copy"];

    [$copyButton addActionListener: lambda({
        println("Copy action captured!");
        $selected = "";
        foreach $row ([$table getSelectedRows]) {
            # Get values from table
            # operator [ip_hostname] user/proc | timestamp> command
            $operator = [$table getValueAt: $row, 0];
            $ip = [$table getValueAt: $row, 1];
            $hostname = [$table getValueAt: $row, 2];
            $user = [$table getValueAt: $row, 3];
            $proc = [$table getValueAt: $row, 4];
            $time = [$table getValueAt: $row, 6];
            $command = [$table getValueAt: $row, 5];

            $selected .= "$operator \[$ip\_$hostname\] $user\/$proc | $time\> $command\n";
        }
        add_to_clipboard($selected);
    }, \$table)];

    [$bottom add: $copyButton];

    $content = [new JPanel];
    [$content setLayout: [new BorderLayout]];

    [$content add: $scrollPane, [BorderLayout CENTER]];
    [$content add: $bottom, [BorderLayout SOUTH]];

    # Set popup menu for the table
    setupClickListener($table, "command_log");

    # Update table contents
    updateTable();

    # Return the JScrollPane
    return $scrollPane;
}

popup command_log {
    item "Copy" {
        # Copy log entry to clipboard
        println("Right click captured!");
        $selected = "";
        foreach $row ([$table getSelectedRows]) {
            # Get values from table
            # operator [ip_hostname] user/proc | timestamp> command
            $operator = [$table getValueAt: $row, 0];
            $ip = [$table getValueAt: $row, 1];
            $hostname = [$table getValueAt: $row, 2];
            $user = [$table getValueAt: $row, 3];
            $proc = [$table getValueAt: $row, 4];
            $time = [$table getValueAt: $row, 6];
            $command = [$table getValueAt: $row, 5];

            $selected .= "$operator \[$ip\_$hostname\] $user\/$proc | $time\> $command\n";
        }
        add_to_clipboard($selected);
    }
    item "Beacon console" {
        # Open corresponding beacon console
        $selected = "";
        foreach $row ([$table getSelectedRows]) {
            # Compare pid from selected row to pid of all beacons to find correct beacon
            foreach %beacon (beacons()) {
                if (%beacon['pid'] eq [$table getValueAt: $row, 4]) {
                    openBeaconConsole(%beacon['id']);
                }
            }
        }
    }
}

popup view {
    item "Command Log" {
        # Add a tab with the table
        $tab = createVisualization();
        addTab("Command Log", $tab, "A table of commands that have been run on all beacons.");
    }
}

on beacon_input {
    updateTable();
}
